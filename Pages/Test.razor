@page "/recipe/{RecipeId:int}"
@* @using Newtonsoft.Json; *@
@using System.IO;
@using System.Text;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Recipe Details</h3>

@if (isLoading) 
{
    <p>Loading...</p>
}
else
{
    <ol>
        @foreach (var step in Steps)
        {
            <li>@step.Step</li>
        }
    </ol>
}


@code {

    [Parameter]
    public int RecipeId { get; set; }

    private bool isLoading = true;

    @* private RecipeStepsContainer Recipe { get; set; }
    private RecipeStep[] Steps => Recipe?.Steps; *@
    private List<RecipeStep> Steps { get; set; }

    private string? content;
    private string? modContent1;

    private bool getResultsError;
    private bool shouldRender;

    @* get API key *@
    protected string? SPOONACULAR_API_KEY { get; private set; }

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        DotNetEnv.Env.Load(); // Load environment variables from .env file

        SPOONACULAR_API_KEY = DotNetEnv.Env.GetString("SPOONACULAR_API_KEY");
        @* end get API key *@

        await GetRecipeDetails();
        await DeserializeJsonAsync();
        isLoading = false;
        @* await ConvertToRecipe(); *@
    }

        @* Steps = JsonConvert.DeserializeObject<RecipeStep[]>(json);
            Console.WriteLine(Steps); *@

        @* var recipeArray = JsonConvert.DeserializeObject<RecipeStep[]>(json);
            Console.WriteLine(recipeArray);
        Steps = recipeArray[0].Steps; *@

    protected async Task GetRecipeDetails()
    {
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://api.spoonacular.com/recipes/{RecipeId}/analyzedInstructions"),
            Headers = 
            {
                { "x-api-key", SPOONACULAR_API_KEY }
            },
        };

        var response = await HttpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            content = await response.Content.ReadAsStringAsync();
                @* Console.WriteLine(content); *@
                var modContent = content.Remove(0, 20);
                int i = modContent.Length - 3;
                modContent1 = modContent.Remove(i,2);
                Console.WriteLine(modContent1);

            Steps = await DeserializeJsonAsync();
            @* JsonConvert.DeserializeObject<List<RecipeStep>>(modContent1); *@ 
        }
        else
        {
            getResultsError = true;
        }
        
    }

    protected async Task<List<RecipeStep>> DeserializeJsonAsync()
    {
        using (var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(modContent1)))
        {
            return await JsonSerializer.DeserializeAsync<List<RecipeStep>>(memoryStream);
        }
        StateHasChanged();
    }


    public class RecipeStep
    {
        @* [JsonPropertyName("number")]
        public string? Number { get; set; }

        [JsonPropertyName("step")]
        public string? Step { get; set; } *@

        public int Number { get; set; }
        public string Step { get; set; }
    }

    public class RecipeStepsContainer
    {
        public string Name { get; set; }
        public RecipeStep[] Steps { get; set; }
    }


}