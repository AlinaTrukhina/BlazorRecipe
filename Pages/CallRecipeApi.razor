@page "/recipeAPI"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Get Data from recipe API</h1>

@if (getResultsError || recipes is null) 
{
    <p>Unable to get info from API</p>
}
else 
{
    <ul>
        @foreach (var item in recipes)
        {
            <li>item.title</li>
        }
    </ul>
}

@code {
    private IEnumerable<APIRecipe>? recipes = Array.Empty<APIRecipe>();
    private bool getResultsError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, 
        $"https://api.spoonacular.com/recipes/complexSearch?apiKey=a151019d6e5041dbbee481ab3778e65b&ingredients=apples");
        
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            recipes = await JsonSerializer.DeserializeAsync<IEnumerable<APIRecipe>>(responseStream);
        }
        else {
            getResultsError = true;
        }

        shouldRender = true;
    }

    public class APIRecipe
    {
        [JsonPropertyName("results.title")]
        public string? Name { get; set; }
    }

}