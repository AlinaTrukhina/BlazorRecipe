@page "/search-recipes"
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Logging
@using System.Text.RegularExpressions 
@inject ILogger<RecipeSearch> Logger
@inject IHttpClientFactory ClientFactory

<PageTitle>Recipe Search</PageTitle>

<h1>Get Data from recipe API</h1>

<form action="" method="get" @onsubmit="SearchRecipes">
    <label for="searchTerm">Ingredient:</label>
    <input type="text" id="searchTerm" name="searchTerm" @bind-value="searchTerm" pattern="[a-zA-Z]+"/>
    <button type="submit" @onclick="SearchRecipes">Search</button>
</form>

@if ( searchTerm != null && recipes.Count() != 0 )
{
        <table>
        <thead>
            <tr>
                <th>
                    Title
                </th>
                <th>
                    Photo
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in recipes)
            {
                <tr>
                    <td>@item.Title</td>
                    <td><img src=@item.Image alt=@item.Title></td>
                    <td><a href="recipe-details/@item.Id"><button>Details</button></a></td>
                </tr>
            }
        </tbody>
    </table>
}
else if ( recipes.Count() == 0 )
{
    <p>No results found</p>
}
else if ( !Regex.IsMatch(searchTerm, "^[a-zA-Z]+$") )
{
    <p>Please enter a search term containing only letters.</p>
}
else 
{
    <p>Please enter ingredient to search by</p>
}

@code {
private IEnumerable<APIRecipe>? recipes = Array.Empty<APIRecipe>();
private bool getResultsError;
private bool shouldRender;
private string? searchTerm;

protected async Task SearchRecipes()
{
    Console.WriteLine(searchTerm);

    var request = new HttpRequestMessage
    {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://api.spoonacular.com/recipes/findByIngredients?ingredients={searchTerm}&ranking=1&ignorePantry=true&number=5"),
            Headers =
            {
                { "x-api-key", "a151019d6e5041dbbee481ab3778e65b" }
            },
    };

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);
    
    if (response.IsSuccessStatusCode)
    {

        using var responseStream = await response.Content.ReadAsStreamAsync();
        recipes = await JsonSerializer.DeserializeAsync
        <IEnumerable<APIRecipe>>(responseStream);
        
    }
    else
    {
        getResultsError = true;
    }

    shouldRender = true;
    
}

protected override bool ShouldRender() => shouldRender;

@* protected override async Task OnInitializedAsync() {
    var request = new HttpRequestMessage
    {
            Method = HttpMethod.Get,
            RequestUri = new Uri("https://api.spoonacular.com/recipes/findByIngredients?ingredients=apples%2Cflour%2Csugar&ranking=1&ignorePantry=true&number=5"),
            Headers =
            {
                { "x-api-key", "a151019d6e5041dbbee481ab3778e65b" }
            },
    };

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);
    
    if (response.IsSuccessStatusCode)
    {

        using var responseStream = await response.Content.ReadAsStreamAsync();
        recipes = await JsonSerializer.DeserializeAsync
        <IEnumerable<APIRecipe>>(responseStream);
    }
    else
    {
        getResultsError = true;
    }

    shouldRender = true;
    
} *@

public class APIRecipe
{
    [JsonPropertyName("id")]
    public int? Id { get; set; }

    [JsonPropertyName("title")]
    public string? Title { get; set; }

    [JsonPropertyName("image")]
    public string? Image { get; set; }

}
}
